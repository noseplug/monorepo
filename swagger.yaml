# Note: This is a swagger file describing an API endpoint.
# The easiest way to edit this is to use the online editor at
#   http://editon.swagger.io/
---
swagger: '2.0'
info:
  version: 0.0.0
  title: Noseplug API
paths:
  /events:
    get:
      responses:
        200:
          description: Returns an array of all odor events.
          schema:
            type: array
            items:
              $ref: "#/definitions/Event"

  /events/{EventId}/reports:
    get:
      parameters:
        - $ref: "#/parameters/EventId"
      responses:
        200:
          description: Returns an array of all reports associated with this odor event.

  /events/{EventId}/wallposts:
    get:
      parameters:
        - $ref: "#/parameters/EventId"
      responses:
        200:
          description: Returns an array of all posts submitted to the odor event's wall.
          schema:
            type: array
            items:
              $ref: "#/definitions/Wallpost"

  /events/{EventId}/subscribers:
    get:
      parameters:
        - $ref: "#/parameters/EventId"
      responses:
        200:
          description: Returns an array of user IDs of users subscribed to the odor event.
          schema:
            type: array
            items:
              $ref: "#/definitions/Id"

  /reports/{ReportId}:
    parameters:
      - $ref: "#/parameters/ReportId"
    get:
      responses:
        200:
          description: Returns the report with the given ID.
          schema:
            $ref: "#/definitions/Report"

  /users/{UserId}:
    parameters:
      - $ref: "#/parameters/UserId"
    get:
      responses:
        200:
          description: Returns the profile of the user with the given ID.
          schema:
            $ref: "#/definitions/User"

  /users/{UserId}/subscriptions:
    parameters:
      - $ref: "#/parameters/UserId"
    get:
      responses:
        200:
          description: Returns an array of event IDs that the user is subscribed to.
          schema:
            type: array
            items:
              $ref: "#/definitions/Id"
    post:
      parameters:
        - name: EventId
          in: body
          description: The ID of the odor event to subscribe to.
          required: true
          schema:
            $ref: "#/definitions/Id"
      responses:
        201:
          description: Added the odor event to the user's list of subscriptions.

  /users/{UserId}/subscriptions/{EventId}:
    parameters:
      - $ref: "#/parameters/UserId"
      - $ref: "#/parameters/EventId"
    delete:
      responses:
        200:
          description: The user successfully unsubscribed from the odor event with the given ID.

  /wallposts/{WallpostId}:
    parameters:
      - $ref: "#/parameters/WallpostId"
    get:
      responses:
        200:
          description: Returns the wallpost with the given ID.
          schema:
            $ref: "#/definitions/Wallpost"
    put:
      parameters:
        - name: Wallpost
          in: body
          description: Create a new wallpost or replace an existing one with the given ID.
          required: true
          schema:
            $ref: "#/definitions/Wallpost"
      responses:
        201:
          description: The wallpost was created.



parameters:
  UserId:
    name: UserId
    in: path
    description: A UUID identifying a Noseplug user.
    required: true
    type: string
    format: uuid

  EventId:
    name: EventId
    in: path
    description: A UUID identifying a Noseplug odor event.
    required: true
    type: string
    format: uuid

  ReportId:
    name: ReportId
    in: path
    description: A UUID identifying a Noseplug odor report.
    required: true
    type: string
    format: uuid

  WallpostId:
    name: WallpostId
    in: path
    description: A UUID identifying a Noseplug wallpost.
    required: true
    type: string
    format: uuid

definitions:
  Id:
    type: string
    format: uuid
    description: A UUID for identifying a Noseplug resource, such as posts, messages, users, and odor events.

  Odor:
    type: object
    properties:
      Strength:
        type: string
        description: "The strength of an odor. Must be one of the following: LIGHT, MODERATE, STRONG, VERY_STRONG"

      Type:
        type: string
        description: "The type of an odor. Must be one of the following: FRAGRANT, PUNGENT, PUTRID, FECAL, FISHY, EARTHY, PINE, CHEMICAL, MEDICINAL, SULFUR, OTHER"

  Location:
    type: object
    properties:
      Latitude:
        type: number
        format: double
        description: The latitude component of the location. North is positive and south is negative.
      Longitude:
        type: number
        format: double
        description: The longitude component of the location. East is positive and west is negative.

  Report:
    type: object
    properties:
      ReportId:
        $ref: "#/definitions/Id"
      UserId:
        $ref: "#/definitions/Id"
      EventId:
        $ref: "#/definitions/Id"
      Location:
        $ref: "#/definitions/Location"
      Odor:
        $ref: "#/definitions/Odor"
      FilingTime:
        type: string
        format: date-time
        description: The UTC time when the report was created.

  Event:
    type: object
    properties:
      EventId:
        $ref: "#/definitions/Id"
      Name:
        type: string
        description: The user-submitted title for an odor event.
      OwnerId:
        $ref: "#/definitions/Id"
      AdminIds:
        type: array
        description: An array of the user IDs of the administrators of an odor event.
        items:
          $ref: "#/definitions/Id"

  Wallpost:
    type: object
    properties:
      WallpostId:
        $ref: "#/definitions/Id"
      UserId:
        $ref: "#/definitions/Id"
      EventId:
        $ref: "#/definitions/Id"
      SubmitTime:
        type: string
        format: date-time
        description: The UTC time when the message was submitted.
      Content:
        type: string
        description: The content of a message posted by a user.

  User:
    type: object
    properties:
      UserId:
        $ref: "#/definitions/Id"
      # TODO: where do we put passwords to update passwords? The API should never return a hashed password, but we need a way to send plain passwords to the API to create user accounts.
      Name:
        type: string
      Email:
        type: string
        format: email
      PhoneNo:
        type: string
        format: tel
      Gender:
        type: string
        description: This can be MALE, FEMALE, or any other alphabetic string entered by the user. It must be normalized to upper case.


